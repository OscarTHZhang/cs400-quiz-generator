/**
 * Project: CS 400 Final Project
 * Name:	Quiz Generator
 * A-team:	#23
 * 
 * Credit:
 * 
 */

package application;
	
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;

import javafx.collections.FXCollections;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

/**
 * This Application is the UI for Design Application
 * @author Oscar
 *
 */
public class DesignTestScene {
	
	private Stage stage; // the stage that is built on
	
	private VBox planeElement; // the vertical box that contains all the elements
	
	private HBox chooseTopic; // contains choosing list of all the topic options
	private HBox numQuestion; // contains the text field that shows number of questions you want to have
	private HBox options; // contains the options: cancel and start
	private HBox showTopic; // contains the chosen topics
	
	private ArrayList<String> chosenTopic; // the list of topics that the user has chosen
	
	/**
	 * The constructor of the DesignSecne class
	 * @param primaryStage
	 */
	public DesignTestScene(Stage primaryStage) {
		stage = primaryStage;
		chosenTopic = new ArrayList<String>();
	}
	
	/**
	 * return the scene that is generated by the class
	 * @return the scene that is generated by the class
	 */
	public Scene getScene() {
		BorderPane root = new BorderPane();
		setLayout();
		root.setCenter(planeElement);
		Scene scene = new Scene(root,400,400);
		scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
		return scene;
	}
	
	/**
	 * private helper that sets the layout plan
	 * @throws Exception if there is an exception when initializing these boxes layout
	 */
	private void setLayout() {
		planeElement = new VBox(); // contains all the HBox
		planeElement.setAlignment(Pos.CENTER);
		planeElement.setSpacing(50.0);
		
		chooseTopic = new HBox();
		chooseTopic.setSpacing(15.0);
		chooseTopic.getChildren().add(new Label("Choosing the topic:"));
		
		// TODO: should not be able to add the same topic once again
		// this should be imported from another array list in the back end topic class
		ComboBox<String> topicList = new ComboBox<String>(
			FXCollections.observableArrayList(
				"topic 1",
				"topic 2",
				"topic 3",
				"...."	
			)
		);
		chooseTopic.getChildren().add(topicList);
		
		// a new HBox for showing the topic
		showTopic = new HBox();
		showTopic.setSpacing(5.0);
		
		// set up select button
		Button add = new Button("+");
		// set the functionality using lambda expression
		add.setOnAction(event -> {
			if (!chosenTopic.contains(topicList.getValue())) {
				chosenTopic.add(topicList.getValue());	
				showTopic.getChildren().add(new Label(chosenTopic.get(chosenTopic.size() - 1)));
				// get the latest added topic to display on the screen
			}
		});
		// add the button
		chooseTopic.getChildren().add(add);
		
		// set up number of questions box
		numQuestion = new HBox();
		numQuestion.setSpacing(15.0);
		numQuestion.getChildren().add(new Label("Number of questions:"));
		numQuestion.getChildren().add(new TextField());

		options = new HBox();
		options.setSpacing(50.0);
		
		// cancel button
		options.getChildren().add( createButtCancel() );
		// start button
		options.getChildren().add( createButtStart() );
		setBoxLayout(); // set the boxes' layout
	}
	
	/**
	 * set the layout and containment of the VBoxes and HBoxes used in this scene
	 */
	private void setBoxLayout() {
		// set the alignment of all the boxes
		chooseTopic.setAlignment(Pos.CENTER);
		numQuestion.setAlignment(Pos.CENTER);
		options.setAlignment(Pos.CENTER);
		showTopic.setAlignment(Pos.CENTER);
		
		// add the HBox into VBox
		planeElement.getChildren().add(chooseTopic);
		planeElement.getChildren().add(numQuestion);
		planeElement.getChildren().add(options);
		planeElement.getChildren().add(showTopic);
	}
	
	/**
	 * create the button for cancel
	 * @return Button object for canceling
	 */
	private Button createButtCancel() {
		Button cancel = new Button("CANCEL");
		MainMenuScene mainMenu = new MainMenuScene(stage);
		// set button function
		cancel.setOnAction(e -> {stage.setScene(mainMenu.getScene()); stage.show();});
		return cancel;
	}
	
	/**
	 * create the button for start the quiz
	 * @return Button object for starting
	 */
	private Button createButtStart() {
		Button start = new Button("START");
		QuestionScene question = new QuestionScene(stage);
		// set button function
		start.setOnAction(e -> {stage.setScene(question.getScene()); stage.show();});
		return start;
	}
	
}
